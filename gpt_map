import dash
from dash import dcc, html, Input, Output
import plotly.express as px
import pandas as pd

df = pd.read_csv("percent_languages.csv", sep=",")

app = dash.Dash(__name__)

# Define app layout
app.layout = html.Div([
    dcc.RadioItems(
        id='data-selector',
        options=[
            {'label': 'Age', 'value': 'age'},
            {'label': 'Poverty', 'value': 'poverty'},
            {'label': 'Education', 'value': 'education'}
        ],
        value='age',
        labelStyle={'display': 'block'}
    ),
    dcc.RadioItems(
        id='language-selector',
        options=[
            {'label': 'Only English', 'value': 'Only English'},
            {'label': 'Spanish', 'value': 'Spanish'},
            {'label': 'Other Language', 'value': 'Other Language'}
        ],
        value='Only English',
        labelStyle={'display': 'block'},
        inline = True,
        
    ),
    dcc.Graph(id='heatmap')
])

# Define callback to update the heatmap based on selected data and language
@app.callback(
    Output('heatmap', 'figure'),
    [Input('data-selector', 'value'),
     Input('language-selector', 'value')]
)
def update_heatmap(selected_data, selected_language):
    # Select columns based on the selected data
    if selected_data == 'age':
        columns_to_display = ['5 to 17', '18 to 64', '65+']
    elif selected_data == 'poverty':
        columns_to_display = ['Below poverty level', 'At or above poverty level']
    elif selected_data == 'education':
        columns_to_display = ['Less than high school graduate', 'High school graduate',
                              'Some college or associate\'s degree', 'Bachelor\'s degree or higher']

    # Filter dataframe based on selected language
    filtered_df = df.loc[df['Language'] == selected_language]

    # Generate heatmap using Plotly Express
    fig = px.choropleth(data_frame = filtered_df, 
                        locations='State', 
                        locationmode='USA-states',
                        color=columns_to_display[0], 
                        scope='usa', 
                        hover_name='State',
                        title=f'{selected_language} Speakers - {selected_data.capitalize()} Heatmap',
                        color_continuous_scale='Viridis')

    # Add additional columns if necessary
    if len(columns_to_display) > 1:
        for col in columns_to_display[1:]:
            fig.add_scattergeo(locations=df['State'], locationmode='USA-states',
                               marker=dict(color=filtered_df[col]), name=col)

    return fig

if __name__ == '__main__':
    app.run_server(debug=True)
